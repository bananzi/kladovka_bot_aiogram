import datetime
import re
from pathlib import Path
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, LabeledPrice, CallbackQuery

from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.api.entities.modes import StartMode, ShowMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Row, Cancel, Checkbox

from aiogram_dialog.widgets.media import StaticMedia
from aiogram_dialog.widgets.text import Const

from config_reader import config
from database import requests as rq
from utils import scheduler_func
from text import all_quests

list_course = {1: "–ö–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è —á—É–∂–∏–º?", }
PRICE_LIST = {
    1: LabeledPrice(label="1 –ö—É—Ä—Å", amount=360_00),  # 500 RUB
}
BASE_DIR = Path(__file__).resolve().parent.parent
TRANSLATE_DAYS = {
    "mon": "–ü–Ω",
    "tue": "–í—Ç",
    "wed": "–°—Ä",
    "thu": "–ß—Ç",
    "fri": "–ü—Ç",
    "sat": "–°–±",
    "sun": "–í—Å",
}


async def get_id(dialog_manager: DialogManager, **kwargs):
    '''
    –ì–µ—Ç—Ç–µ—Ä id –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–∏–∞–ª–æ–≥–∞ –∏ –∑–∞–ø–∏—Ö–∏–≤–∞–µ—Ç –µ–≥–æ –≤ dialog_data.
    '''
    dialog_manager.dialog_data['user_id'] = dialog_manager.start_data['user_id']
    return {}


async def pre_pay(callback: CallbackQuery, button: Button,
                  dialog_manager: DialogManager):
    '''
    –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã. –ì–¥–µ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–∞ –∏ –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    '''
    user_id = dialog_manager.dialog_data['user_id']
    course_id = dialog_manager.dialog_data['course_id']
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if await rq.is_user_paid(user_id):
        await callback.message.answer(text="–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –î–æ–∂–¥–∏—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å.")
        return
    if await rq.is_user_in_test_period(user_id):
        await callback.message.answer("–°–µ–π—á–∞—Å —Ç—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥,"
                                      " –Ω–æ —É–∂–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ñ–æ—Ä–º–∏ –æ–ø–ª–∞—Ç—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–æ–∫–∞—á–∫—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π üí™")
    # –¢—É—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã, –∞ –∑–∞—Ç–µ–º ->
    await process_payment(callback=callback, button=button, dialog_manager=dialog_manager)

    await callback.message.answer(text='–û–ø–ª–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤—ã—à–µ, –∑–∞—Ç–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')


async def process_payment(callback: CallbackQuery, button: Button,
                          dialog_manager: DialogManager):
    '''
    –ü—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã... –ü—Ä–æ–≤–µ—Ä–∫–∏... –í—ã—Å—ã–ª–∫–∞ —Å—á—ë—Ç–∞...
    '''
    user_id = dialog_manager.dialog_data['user_id']
    course_id = dialog_manager.dialog_data.get("course_id")
    course_lenght = dialog_manager.dialog_data.get("course_lenght")

    if not course_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω!")
        return

    if await rq.is_user_paid(user_id):
        await callback.message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!")
        return
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É

    # # –î–õ–Ø –û–ë–•–û–î–ê –û–ü–õ–ê–¢–´ –î–õ–Ø –¢–ï–°–¢–û–í!!!!!!
    # ###
    # await rq.set_payment(tg_id=user_id, course_id=course_id, duration_days_pay=course_lenght)
    # await callback.answer(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∫—É—Ä—Å {course_id}.")
    # await dialog_manager.start(PaymentMenu.SELECT_TIME)
    # ###

    # –í—ã–∑–æ–≤ –æ–ø–ª–∞—Ç—ã

    await callback.message.bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞",
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫—É—Ä—Å",
        # ID –∫—É—Ä—Å–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ payload
        payload=(str(course_id)+"_"+str(course_lenght)),
        provider_token=config.payment_token.get_secret_value(),
        currency="RUB",
        prices=[PRICE_LIST[course_id]],
        start_parameter="payment",
        # –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å email, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    )


async def is_recieved_today():
    ...


async def process_selecting_time(message: Message,
                                 message_input: MessageInput,
                                 dialog_manager: DialogManager,):
    '''
    :message: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–æ–≤–µ—Ä–∫–∏... –°–æ–∑–¥–∞–Ω–∏–µ job –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ó–∞–ø–∏—Å—å –≤ –ë–î. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä –¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏.
    '''
    try:
        user_input_raw = message.text.strip()
        if len(user_input_raw.split(":")) != 2:
            await message.answer(text='–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä—å –µ–≥–æ. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ¬´–ß–ß:–ú–ú¬ª.')
            return
        else:
            user_input = user_input_raw.split(":")

        if not (0 <= int(user_input[0]) <= 23):
            await message.answer(text='–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä—å –µ–≥–æ. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ¬´–ß–ß:–ú–ú¬ª.')
            return
        elif not (0 <= int(user_input[1]) <= 59):
            await message.answer(text='–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä—å –µ–≥–æ. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ¬´–ß–ß:–ú–ú¬ª.')
            return
    except ValueError as e:
        await message.answer(text='–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä—å –µ–≥–æ')
        print(e)
        return

    user_id = message.from_user.id
    dialog_manager.dialog_data["user_time_hour"] = user_input[0]
    dialog_manager.dialog_data["user_time_minute"] = user_input[1]
    await message.answer(f"–ì–æ—Ç–æ–≤–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è: <b>{user_input[0]}:{user_input[1]}</b>")
    # await rq.set_time_mailing(tg_id=user_id, selected_time_hour=user_input[0], selected_time_minute=user_input[1])
    # await scheduler_func.update_schedule_task(tg_id=user_id, new_hour=int(user_input[0]), new_minute=int(user_input[1]), perenos=0, day=0)
    # await scheduler_func.add_schedule_task(tg_id=user_id, hour=int(user_input[0]), minute=int(user_input[1]))
    await dialog_manager.switch_to(PaymentMenu.SELECT_DAY_OF_WEEK, show_mode=ShowMode.DELETE_AND_SEND)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è CheckBox
async def toggle_day(callback, button: Button, dialog_manager: DialogManager):
    # id –∫–Ω–æ–ø–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—é –¥–Ω—è: "mon", "tue", –∏ —Ç.–¥.
    day = button.widget_id
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –∏–∑ dialog_data (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ set)
    selected_days = dialog_manager.dialog_data.get("selected_days", set())
    if day in selected_days:
        selected_days.remove(day)
        new_state = False
        await callback.answer(f"–î–µ–Ω—å {TRANSLATE_DAYS[str(day)]} —Å–Ω—è—Ç")
    else:
        selected_days.add(day)
        new_state = True
        await callback.answer(f"–î–µ–Ω—å {TRANSLATE_DAYS[str(day)]} –≤—ã–±—Ä–∞–Ω")
    dialog_manager.dialog_data["selected_days"] = selected_days
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞, –≤—ã–∑—ã–≤–∞—è set_checked
    checkbox = dialog_manager.find(day)
    await checkbox.set_checked(new_state)
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await dialog_manager.update(data=dialog_manager.dialog_data)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª
async def on_submit(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    selected_days = dialog_manager.dialog_data.get("selected_days", set())
    user_id = callback.from_user.id
    dialog_manager.dialog_data["user_id"] = user_id

    if len(selected_days) < 2:
        await callback.answer("–í—ã–±–µ—Ä–∏ –º–∏–Ω–∏–º—É–º 2 –¥–Ω—è!", show_alert=True)
        return
    
    await callback.message.answer(f"–ì–æ—Ç–æ–≤–æ! –ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –¥–Ω–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è: \
<b>{", ".join([TRANSLATE_DAYS[k] for k in TRANSLATE_DAYS if k in selected_days])}</b>")
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –∑–Ω–∞—è, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥–Ω—è
    await dialog_manager.switch_to(PaymentMenu.SELECT_START_DATE, show_mode=ShowMode.DELETE_AND_SEND)


async def process_selecting_start_date(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    choice = button.widget_id.split("_")[1]
    if choice == "today":
        dialog_manager.dialog_data["user_selected_start_date"] = 0
        await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –¢—ã –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–¥—ë—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
        await final_saving_time_and_days(message=callback.message, dialog_manager=dialog_manager)
    elif choice == "tomorrow":
        dialog_manager.dialog_data["user_selected_start_date"] = 1
        await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –¢—ã –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ä–∞–Ω—å—à–µ, —á–µ–º <b>–∑–∞–≤—Ç—Ä–∞</b>.")
        await final_saving_time_and_days(message=callback.message, dialog_manager=dialog_manager)
    elif choice == "select":
        await dialog_manager.switch_to(PaymentMenu.SELECT_START_DATE_USER, show_mode=ShowMode.DELETE_AND_SEND)


async def process_selecting_start_date_user(message: Message,
                                            message_input: MessageInput,
                                            dialog_manager: DialogManager):
    new_stop_until = message.text.strip()
    if not re.match(r"^(0[1-9]|[12]\d|3[01])-(0[1-9]|1[0-2])-\d{4}$", new_stop_until):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05-07-2004).")
        return

    try:
        input_date = datetime.datetime.strptime(
            new_stop_until, "%d-%m-%Y").date()
        today = datetime.datetime.today().date()
        max_allowed_date = today + datetime.timedelta(days=7)
        if input_date > max_allowed_date:
            await message.answer("–¢—ã –≤–≤—ë–ª –¥–∞—Ç—É –±–æ–ª—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è. –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –±–ª–∏–∂–µ.")
            return
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ —á—Ç–æ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    dialog_manager.dialog_data["user_selected_start_date"] = new_stop_until

    await message.answer(f"–ì–æ—Ç–æ–≤–æ! –¢—ã –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ä–∞–Ω—å—à–µ <b>{input_date}</b>")
    await final_saving_time_and_days(message=message, dialog_manager=dialog_manager)


async def final_saving_time_and_days(message: Message, dialog_manager: DialogManager):
    user_id = dialog_manager.dialog_data["user_id"]
    user_time_hour = dialog_manager.dialog_data["user_time_hour"]
    user_time_minute = dialog_manager.dialog_data["user_time_minute"]
    selected_days = dialog_manager.dialog_data["selected_days"]
    selected_start_date = dialog_manager.dialog_data["user_selected_start_date"]
    try:
        perenos = selected_start_date if (selected_start_date == 0) or (selected_start_date == 1) else 2
        await scheduler_func.update_schedule_task(user_id, user_time_hour, user_time_minute, selected_days, selected_start_date, perenos)
        result_answer = f"–ì–æ—Ç–æ–≤–æ! –í—Å—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤ <b>{user_time_hour}:{user_time_minute}</b>"\
                             f" –ø–æ <b>{", ".join([TRANSLATE_DAYS[k] for k in TRANSLATE_DAYS if k in selected_days])}</b>"
        if selected_start_date == 1:
            result_answer += " –Ω–µ —Ä–∞–Ω—å—à–µ <b>–∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è</b>."
        elif selected_start_date == 0:
            result_answer += ", –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
        else:
            result_answer += f" –Ω–µ —Ä–∞–Ω—å—à–µ <b>{selected_start_date}</b>."
        
        await message.answer(result_answer)

        from dialogs.main_menu_diag import MainMenu
        await dialog_manager.start(state=MainMenu.START, data=dialog_manager.dialog_data,
                               mode=StartMode.RESET_STACK, show_mode=ShowMode.DELETE_AND_SEND)
    except Exception as e:
        print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ ¬´{e}¬ª –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Ä–∞–∑. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await dialog_manager.switch_to(PaymentMenu.SELECT_TIME, show_mode=ShowMode.DELETE_AND_SEND)
        #await message.answer("–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ï—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—Å—è –æ—à–∏–±–∫–∏ –∏–ª–∏ —Ç—ã –Ω–µ –≤–∏–¥–∏—à—å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏, —Ç–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    
    


async def wind_zero(callback, button: Button, dialog_manager: DialogManager):
    await dialog_manager.switch_to(PaymentMenu.START)


async def wind_one(callback, button: Button,
                   dialog_manager: DialogManager):
    dialog_manager.dialog_data['course_id'] = 1
    dialog_manager.dialog_data['course_lenght'] = 7
    await dialog_manager.switch_to(PaymentMenu.FIRST_COURSE)


async def wind_about_one(callback, button: Button, dialog_manager: DialogManager):
    await dialog_manager.switch_to(PaymentMenu.ABOUT_FIRST)


async def wind_blank(callback, button: Button,
                     dialog_manager: DialogManager):
    dialog_manager.dialog_data['course_id'] = 0
    dialog_manager.dialog_data['course_lenght'] = 0

    await dialog_manager.switch_to(PaymentMenu.BLANK_COURSE)


class PaymentMenu(StatesGroup):
    START = State()
    FIRST_COURSE = State()
    ABOUT_FIRST = State()
    BLANK_COURSE = State()
    SELECT_TIME = State()
    SELECT_DAY_OF_WEEK = State()
    SELECT_START_DATE = State()
    SELECT_START_DATE_USER = State()


payment_menu = Dialog(
    Window(
        Const("–£ –Ω–∞—Å –µ—Å—Ç—å –≤—ã–±–æ—Ä –∏–∑ —ç—Ç–∏—Ö –∫—É—Ä—Å–æ–≤: \n"),
        Const(f"{',\n'.join(f"¬´{item}¬ª" for item in list_course.values())}\n"),
        Const("–¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ —Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å.\n"
              " –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π,"
              " –∞ —Ç–∞–∫–∂–µ –¥–∞—Ç—É –¥–æ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"),
        Const(
            "–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–∞ –∫–∞–∂–¥–æ–º –∏–∑ –∫—É—Ä—Å–æ–≤, —Ç—ã —Å–º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å, –ø–µ—Ä–µ–π–¥—è –ø–æ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫:"
        ),

        Button(Const(f"{list_course[1]}"), id="first_couse",
               on_click=wind_one),
        # Button(Const(f"{list_course[4]}"), id="blank_couse",
        #        on_click=wind_blank),
        Row(
            Cancel(Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        ),

        getter=get_id,
        state=PaymentMenu.START
    ),
    Window(
        StaticMedia(path=str(BASE_DIR / "utils" / "tmp" / "–û–±–ª–æ–∂–∫–∞ 1_0.jpg")),
        Const(
            "–¢—ã –≤—ã–±—Ä–∞–ª –∫—É—Ä—Å\n\
¬´–ö–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è —á—É–∂–∏–º?¬ª\n\n\
–í —ç—Ç–æ–º –∫—É—Ä—Å–µ —Ç—ã –±—É–¥–µ—à—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 7 –¥–Ω–µ–π –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—ã."
        ),
        Row(
            Button(Const(text="–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞"),
                   id="about_one", on_click=wind_about_one)
        ),
        Row(
            Button(Const("–ö—É–ø–∏—Ç—å –∫—É—Ä—Å"), id="payone", on_click=pre_pay),
        ),
        Row(
            Button(Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
                   id="payzero", on_click=wind_zero)
        ),
        state=PaymentMenu.FIRST_COURSE
    ),
    Window(
        StaticMedia(path=str(BASE_DIR / "utils" / "tmp" / "–û–±–ª–æ–∂–∫–∞ 1_0.jpg")),
        Const(text=str(all_quests["quest_1"][0]["text"])),
        Row(Button(Const("–ö—É–ø–∏—Ç—å –∫—É—Ä—Å"), id="pay_from_about_one", on_click=pre_pay)),
        Row(
            Button(Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫—É—Ä—Å–∞"),
                   id="cancel_about_one", on_click=wind_one)
        ),
        state=PaymentMenu.ABOUT_FIRST
    ),
    # Window(
    #     Const(
    #         "–¢—ã –≤—ã–±—Ä–∞–ª –∫—É—Ä—Å ... . –ó–¥–µ—Å—å —Ç—ã –±—É–¥–µ—à—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ç–æ–±–æ–π –≤—Ä–µ–º—è –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–º—É ... ."
    #     ),
    #     Row(
    #         Button(Const("–ö—É–ø–∏—Ç—å –∫—É—Ä—Å"), id="payone", on_click=pre_pay),
    #     ),
    #     Row(
    #         Cancel(Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞"))
    #     ),
    #     state=PaymentMenu.BLANK_COURSE
    # ),
    Window(
        Const("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚è∞\n\n\
–ü–æ–º–Ω–∏, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ 23:59 —Ç–æ–≥–æ –¥–Ω—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª.\n\n\
–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´—á–∞—Å:–º–∏–Ω—É—Ç—ã¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:07), –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è."),
        MessageInput(process_selecting_time),
        state=PaymentMenu.SELECT_TIME
    ),
    Window(
        Const("–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–Ω–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚è∞\n\n\
–ü–æ–º–Ω–∏, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ 23:59 —Ç–æ–≥–æ –¥–Ω—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª.\n\n\
–î–ª—è –≤—ã–±–æ—Ä–∞ –≤—ã–¥–µ–ª–∏ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –ø–æ–ª—å–∑—É—è—é—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."),
        Row(
            Checkbox(
                checked_text=Const("‚úÖ –ü–Ω"),
                unchecked_text=Const("‚ùå –ü–Ω"),
                id="mon",
                default=False,
                on_click=toggle_day
            ),
            Checkbox(
                checked_text=Const("‚úÖ –í—Ç"),
                unchecked_text=Const("‚ùå –í—Ç"),
                id="tue",
                default=False,
                on_click=toggle_day
            ),
            Checkbox(
                checked_text=Const("‚úÖ –°—Ä"),
                unchecked_text=Const("‚ùå –°—Ä"),
                id="wed",
                default=False,
                on_click=toggle_day
            ),
        ),
        Row(
            Checkbox(
                checked_text=Const("‚úÖ –ß—Ç"),
                unchecked_text=Const("‚ùå –ß—Ç"),
                id="thu",
                default=False,
                on_click=toggle_day
            ),
            Checkbox(
                checked_text=Const("‚úÖ –ü—Ç"),
                unchecked_text=Const("‚ùå –ü—Ç"),
                id="fri",
                default=False,
                on_click=toggle_day
            ),
            Checkbox(
                checked_text=Const("‚úÖ –°–±"),
                unchecked_text=Const("‚ùå –°–±"),
                id="sat",
                default=False,
                on_click=toggle_day
            ),
            Checkbox(
                checked_text=Const("‚úÖ –í—Å"),
                unchecked_text=Const("‚ùå –í—Å"),
                id="sun",
                default=False,
                on_click=toggle_day
            ),
        ),
        Button(Const("–ì–æ—Ç–æ–≤–æ"), id="submit", on_click=on_submit),
        state=PaymentMenu.SELECT_DAY_OF_WEEK
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ –∫—É—Ä—Å–∞\n\n\
–¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∫—É—Ä—Å —Å–µ–≥–æ–¥–Ω—è ‚Äî –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.\n\n\
–ê –º–æ–∂–µ—à—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ª—é–±—É—é —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π –Ω–µ–¥–µ–ª–∏ üí´"),
        Button(Const("–°–µ–≥–æ–¥–Ω—è"), id="start_today",
               on_click=process_selecting_start_date),
        Button(Const("–ó–∞–≤—Ç—Ä–∞"), id="start_tomorrow",
               on_click=process_selecting_start_date),
        Button(Const("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É"), id="start_select",
               on_click=process_selecting_start_date),
        state=PaymentMenu.SELECT_START_DATE
    ),
    Window(
        Const("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ üìÜ\n"
              "–§–æ—Ä–º–∞—Ç: <b>–¥–¥-–º–º-–≥–≥–≥–≥</b>\n\n"
              "–í–∞–∂–Ω–æ: –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –ø–æ–∑–¥–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è"),
        MessageInput(process_selecting_start_date_user),
        state=PaymentMenu.SELECT_START_DATE_USER
    )
)
