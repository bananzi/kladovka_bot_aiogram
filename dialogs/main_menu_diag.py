from typing import Dict
from pathlib import Path
from aiogram.fsm.state import State, StatesGroup
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.common import Whenable
from aiogram_dialog.widgets.kbd import Button, Row, Url, Start, Cancel  # noqa: F401
from aiogram_dialog.widgets.media import StaticMedia
from aiogram_dialog.widgets.text import Const

# –õ–æ–∫–∞–ª—å–Ω—ã–µ
from dialogs.payment_diag import PaymentMenu
from dialogs.settings_diag import Settings
from dialogs.tp_diag import TPBot
from database import requests as rq

from utils.scheduler_func import remove_schedule_task
from utils import mailing
BASE_DIR = Path(__file__).resolve().parent.parent


async def test_clear_all(callback, button: Button,
                         dialog_manager: DialogManager):
    await remove_schedule_task(dialog_manager.dialog_data["user_id"])
    await rq.for_test_clear_courses(dialog_manager.dialog_data["user_id"])
    await rq.for_test_clear_TimeMailing(dialog_manager.dialog_data["user_id"])


async def get_id(dialog_manager: DialogManager, **kwargs):
    '''
    –ì–µ—Ç—Ç–µ—Ä id –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ start_data. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ —Ç–∞–∫, —Ç–æ –≤ –¥–∏–∞–ª–æ–≥–µ –º–µ–Ω—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏.
    '''
    dialog_manager.dialog_data['user_id'] = dialog_manager.start_data['user_id']
    user_from_Courses = await rq.get_user_in_course(dialog_manager.start_data['user_id'])
    if not user_from_Courses:
        dialog_manager.dialog_data['is_paid'] = False
        dialog_manager.dialog_data['is_testing'] = False
        dialog_manager.dialog_data['already_recieved'] = False
    else:
        dialog_manager.dialog_data['is_paid'] = user_from_Courses.is_paid
        dialog_manager.dialog_data['already_recieved'] = user_from_Courses.already_received
        dialog_manager.dialog_data['is_testing'] = True if (user_from_Courses.payment_period == 3) and\
            (user_from_Courses.is_paid) else False
    return {}


def not_yet_testing(data: Dict, widget: Whenable, manager: DialogManager):
    '''–í–æ–∑—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞ —Ç–µ—Å—Ç–µ –∏ –Ω–µ –Ω–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–º –∫—É—Ä—Å–µ.'''
    return not (data['dialog_data']["is_testing"] or data['dialog_data']["is_paid"])


def not_yet_paid(data: Dict, widget: Whenable, manager: DialogManager):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–º –∫—É—Ä—Å–µ.'''
    return not data['dialog_data']["is_paid"]


def user_already_in_course(data: Dict, widget: Whenable, manager: DialogManager):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å, —á—Ç–æ –æ–Ω –Ω–∞ –∫–∞–∫–æ–º-–ª–∏–±–æ –∫—É—Ä—Å–µ, –≤ —Ç.—á. —Ç–µ—Å—Ç–æ–≤—ã–π.'''
    return data['dialog_data']["is_paid"]


def may_send_answer(data: Dict, widget: Whenable, manager: DialogManager):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏–µ, –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ—Ç–æ—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç.'''
    return data['dialog_data']["already_recieved"] and data["dialog_data"]["is_paid"]


async def done_main(callback, button: Button,
                    dialog_manager: DialogManager):
    '''–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ diff_hand.'''
    await callback.message.delete()
    await callback.message.answer(text="–°–µ–π—á–∞—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu")
    await dialog_manager.done()


async def start_pay_diag(callback, button: Button,
                         dialog_manager: DialogManager):
    '''–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç—É–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –æ–ø–ª–∞—Ç–æ–π'''
    await dialog_manager.start(PaymentMenu.START, data=dialog_manager.dialog_data)


async def start_settings_diag(callback, button: Button,
                              dialog_manager: DialogManager):
    '''–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç—É–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏'''
    await dialog_manager.start(Settings.START, data=dialog_manager.dialog_data)


async def sub_set_payment(callback, button: Button,
                          dialog_manager: DialogManager):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.'''
    await rq.set_payment(dialog_manager.dialog_data['user_id'], course_id=0, duration_days_pay=3)
    await dialog_manager.start(state=PaymentMenu.SELECT_TIME)
    # await dialog_manager.switch_to(state=MainMenu.START, show_mode=ShowMode.SEND)


async def test_period_wind(callback, button: Button,
                           dialog_manager: DialogManager):
    '''–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.'''
    await dialog_manager.switch_to(MainMenu.TEST_QUEST)


async def back_main(callback, button: Button,
                    dialog_manager: DialogManager):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–∫–Ω–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.'''
    await dialog_manager.switch_to(MainMenu.START)


async def testing_add_day(callback, button: Button, dialog_manager: DialogManager):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è –∫—É—Ä—Å–∞ –≤ –ë–î –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ç—Å—ã–ª–∫–∏ –∑–∞–¥–∞–Ω–∏—è'''
    # print(dialog_manager.dialog_data["user_id"])
    user_id = dialog_manager.dialog_data["user_id"]
    # await rq.add_day(user_id)
    await mailing.mailing(user_id)


class MainMenu(StatesGroup):
    START = State()
    TEST_QUEST = State()
    PRE_CHANGE_TIME = State()
    CHANGE_TIME = State()
    PRE_CHANGE_DAY = State()
    CHANGE_DAY = State()


main_menu = Dialog(
    Window(
        Const("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),

        Row(
            Button(Const("–ö—É–ø–∏—Ç—å –∫—É—Ä—Å"), id="pay",
                   on_click=start_pay_diag),
            Url(Const("–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞"), url=Const("https://t.me/kladovationDesign_bot")),
        ),
        Row(
            Button(Const("–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥"),
                   id="test_quest", on_click=test_period_wind, when=not_yet_testing),
        ),
        Row(
            Button(Const(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ"),
                   id="send", on_click=done_main, when=may_send_answer),
        ),
        Row(
            Button(Const("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"), id="change_time",
                   on_click=start_settings_diag, when=user_already_in_course),
        ),
        # Row(
        #     Button(Const("test text"),
        #            id="test_text",
        #            on_click=testing_add_day)
        # ),
        # Row(
        #     Button(Const("clear all"), id="clear_course",
        #            on_click=test_clear_all),
        # ),
        getter=get_id,
        state=MainMenu.START
    ),
    Window(
        StaticMedia(
            path=f"{BASE_DIR}/utils/tmp/–û–±–ª–æ–∂–∫–∞ 0_0.png"
        ),
        Const("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª–∏—Ç—Å—è 3 –¥–Ω—è.\n\n\
–î–∞–ª–µ–µ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞, –≤—Ä–µ–º—è –∏ –¥–Ω–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚è∞\n\n\
–ü–æ–º–Ω–∏, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ 23:59 —Ç–æ–≥–æ –¥–Ω—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª.\n\
–¢—ã —Å–º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–π—Ç–∏ —Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å.\n\n\
–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üëæ"),
        Button(Const("–ù–∞—á–Ω—ë–º!"), id="trial", on_click=sub_set_payment),
        Button(Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
               id='back_main', on_click=back_main),
        state=MainMenu.TEST_QUEST,
    ),
)
